schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "author"
"""
type author {
  id: uuid!
  name: String!
}

"""
aggregated selection of "author"
"""
type author_aggregate {
  aggregate: author_aggregate_fields
  nodes: [author!]!
}

"""
aggregate fields of "author"
"""
type author_aggregate_fields {
  count(columns: [author_select_column!], distinct: Boolean): Int
  max: author_max_fields
  min: author_min_fields
}

"""
order by aggregate values of table "author"
"""
input author_aggregate_order_by {
  count: order_by
  max: author_max_order_by
  min: author_min_order_by
}

"""
input type for inserting array relation for remote table "author"
"""
input author_arr_rel_insert_input {
  data: [author_insert_input!]!
  on_conflict: author_on_conflict
}

"""
Boolean expression to filter rows from the table "author". All fields are combined with a logical 'AND'.
"""
input author_bool_exp {
  _and: [author_bool_exp]
  _not: author_bool_exp
  _or: [author_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "author"
"""
enum author_constraint {
  """unique or primary key constraint"""
  author_pkey
}

"""
input type for inserting data into table "author"
"""
input author_insert_input {
  id: uuid
  name: String
}

"""aggregate max on columns"""
type author_max_fields {
  id: uuid
  name: String
}

"""
order by max() on columns of table "author"
"""
input author_max_order_by {
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type author_min_fields {
  id: uuid
  name: String
}

"""
order by min() on columns of table "author"
"""
input author_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "author"
"""
type author_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [author!]!
}

"""
input type for inserting object relation for remote table "author"
"""
input author_obj_rel_insert_input {
  data: author_insert_input!
  on_conflict: author_on_conflict
}

"""
on conflict condition type for table "author"
"""
input author_on_conflict {
  constraint: author_constraint!
  update_columns: [author_update_column!]!
  where: author_bool_exp
}

"""
ordering options when selecting data from "author"
"""
input author_order_by {
  id: order_by
  name: order_by
}

"""
primary key columns input for table: "author"
"""
input author_pk_columns_input {
  id: uuid!
}

"""
select columns of table "author"
"""
enum author_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "author"
"""
input author_set_input {
  id: uuid
  name: String
}

"""
update columns of table "author"
"""
enum author_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "author"
  """
  delete_author(
    """filter the rows which have to be deleted"""
    where: author_bool_exp!
  ): author_mutation_response

  """
  delete single row from the table: "author"
  """
  delete_author_by_pk(id: uuid!): author

  """
  insert data into the table: "author"
  """
  insert_author(
    """the rows to be inserted"""
    objects: [author_insert_input!]!

    """on conflict condition"""
    on_conflict: author_on_conflict
  ): author_mutation_response

  """
  insert a single row into the table: "author"
  """
  insert_author_one(
    """the row to be inserted"""
    object: author_insert_input!

    """on conflict condition"""
    on_conflict: author_on_conflict
  ): author

  """
  update data of the table: "author"
  """
  update_author(
    """sets the columns of the filtered rows to the given values"""
    _set: author_set_input

    """filter the rows which have to be updated"""
    where: author_bool_exp!
  ): author_mutation_response

  """
  update single row of the table: "author"
  """
  update_author_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: author_set_input
    pk_columns: author_pk_columns_input!
  ): author
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "author"
  """
  author(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): [author!]!

  """
  fetch aggregated fields from the table: "author"
  """
  author_aggregate(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): author_aggregate!

  """fetch data from the table: "author" using primary key columns"""
  author_by_pk(id: uuid!): author
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "author"
  """
  author(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): [author!]!

  """
  fetch aggregated fields from the table: "author"
  """
  author_aggregate(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): author_aggregate!

  """fetch data from the table: "author" using primary key columns"""
  author_by_pk(id: uuid!): author
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
